/**************************************************************************************************

 @File   : [ MatrixGL.cpp ] 一般的な4x4の行列 Matrix クラスの定義
 @Auther : Unisawa

**************************************************************************************************/



//***********************************************************************************************//
//                                                                                               //
//  @Include File                                                                                //
//                                                                                               //
//***********************************************************************************************//

//-----MainSetting-----//
#include "000_Main/Main.h"
#include "001_Manager/Manager.h"

//-----Object-----//
#include "008_Utility/MatrixGL.h"

//***********************************************************************************************//
//                                                                                               //
//  @Macro Definition                                                                            //
//                                                                                               //
//***********************************************************************************************//
#ifdef USE_OPENGL

//***********************************************************************************************//
//                                                                                               //
//  @Static Variable                                                                             //
//                                                                                               //
//***********************************************************************************************//
Matrix Matrix::identity(1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1);
Matrix Matrix::zero(0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 1);

/*=================================================================================================
  @Summary: コンストラクタ
  @Details: None
=================================================================================================*/
Matrix::Matrix()
{
    Identity();
}

/*=================================================================================================
  @Summary: コンストラクタ
  @Details: None
=================================================================================================*/
Matrix::Matrix( float _11, float _12, float _13, float _14,
                float _21, float _22, float _23, float _24,
                float _31, float _32, float _33, float _34,
                float _41, float _42, float _43, float _44 )
{
    this->_11 = _11; this->_12 = _12; this->_13 = _13; this->_14 = _14;
    this->_21 = _21; this->_22 = _22; this->_23 = _23; this->_24 = _24;
    this->_31 = _31; this->_32 = _32; this->_33 = _33; this->_34 = _34;
    this->_41 = _41; this->_42 = _42; this->_43 = _43; this->_44 = _44;
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の加算の定義
  @Details: None
 *===============================================================================================*/
Matrix Matrix::operator + (const Matrix &mtx) const
{
    return Matrix( _11 + mtx._11, _12 + mtx._12, _13 + mtx._13, _14 + mtx._14,
                   _21 + mtx._21, _22 + mtx._22, _23 + mtx._23, _24 + mtx._24,
                   _31 + mtx._31, _32 + mtx._32, _33 + mtx._33, _34 + mtx._34,
                   _41 + mtx._41, _42 + mtx._42, _43 + mtx._43, _44 + mtx._44 );
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の減算の定義
  @Details: None
 *===============================================================================================*/
Matrix Matrix::operator - (const Matrix &mtx) const
{
    return Matrix( _11 - mtx._11, _12 - mtx._12, _13 - mtx._13, _14 - mtx._14,
                   _21 - mtx._21, _22 - mtx._22, _23 - mtx._23, _24 - mtx._24,
                   _31 - mtx._31, _32 - mtx._32, _33 - mtx._33, _34 - mtx._34,
                   _41 - mtx._41, _42 - mtx._42, _43 - mtx._43, _44 - mtx._44 );
}

/*===============================================================================================* 
  @Summary: operator Matrixと実数との乗算の定義
  @Details: None
 *===============================================================================================*/
Matrix Matrix::operator * (float value) const
{
    return Matrix( _11 * value, _12 * value, _13 * value, _14 * value,
                   _21 * value, _22 * value, _23 * value, _24 * value,
                   _31 * value, _32 * value, _33 * value, _34 * value,
                   _41 * value, _42 * value, _43 * value, _44 * value );
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の乗算の定義
  @Details: None
 *===============================================================================================*/
Matrix Matrix::operator * (const Matrix &mtx) const
{
    float s11, s12, s13, s14;
    float s21, s22, s23, s24;
    float s31, s32, s33, s34;
    float s41, s42, s43, s44;

    s11 = _11 * mtx._11 + _12 * mtx._21 + _13 * mtx._31 + _14 * mtx._41;
    s12 = _11 * mtx._12 + _12 * mtx._22 + _13 * mtx._32 + _14 * mtx._42;
    s13 = _11 * mtx._13 + _12 * mtx._23 + _13 * mtx._33 + _14 * mtx._43;
    s14 = _11 * mtx._14 + _12 * mtx._24 + _13 * mtx._34 + _14 * mtx._44;

    s21 = _21 * mtx._11 + _22 * mtx._21 + _23 * mtx._31 + _24 * mtx._41;
    s22 = _21 * mtx._12 + _22 * mtx._22 + _23 * mtx._32 + _24 * mtx._42;
    s23 = _21 * mtx._13 + _22 * mtx._23 + _23 * mtx._33 + _24 * mtx._43;
    s24 = _21 * mtx._14 + _22 * mtx._24 + _23 * mtx._34 + _24 * mtx._44;

    s31 = _31 * mtx._11 + _32 * mtx._21 + _33 * mtx._31 + _34 * mtx._41;
    s32 = _31 * mtx._12 + _32 * mtx._22 + _33 * mtx._32 + _34 * mtx._42;
    s33 = _31 * mtx._13 + _32 * mtx._23 + _33 * mtx._33 + _34 * mtx._43;
    s34 = _31 * mtx._14 + _32 * mtx._24 + _33 * mtx._34 + _34 * mtx._44;

    s41 = _41 * mtx._11 + _42 * mtx._21 + _43 * mtx._31 + _44 * mtx._41;
    s42 = _41 * mtx._12 + _42 * mtx._22 + _43 * mtx._32 + _44 * mtx._42;
    s43 = _41 * mtx._13 + _42 * mtx._23 + _43 * mtx._33 + _44 * mtx._43;
    s44 = _41 * mtx._14 + _42 * mtx._24 + _43 * mtx._34 + _44 * mtx._44;

    return Matrix( s11, s12, s13, s14,
                   s21, s22, s23, s24,
                   s31, s32, s33, s34,
                   s41, s42, s43, s44 );
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の加算の定義
  @Details: None
 *===============================================================================================*/
void Matrix::operator += (const Matrix &mtx)
{
    _11 += mtx._11; _12 += mtx._12; _13 += mtx._13; _14 += mtx._14;
    _21 += mtx._21; _22 += mtx._22; _23 += mtx._23; _24 += mtx._24;
    _31 += mtx._31; _32 += mtx._32; _33 += mtx._33; _34 += mtx._34;
    _41 += mtx._41; _42 += mtx._42; _43 += mtx._43; _44 += mtx._44;
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の減算の定義
  @Details: None
 *===============================================================================================*/
void Matrix::operator -= (const Matrix &mtx)
{
    _11 -= mtx._11; _12 -= mtx._12; _13 -= mtx._13; _14 -= mtx._14;
    _21 -= mtx._21; _22 -= mtx._22; _23 -= mtx._23; _24 -= mtx._24;
    _31 -= mtx._31; _32 -= mtx._32; _33 -= mtx._33; _34 -= mtx._34;
    _41 -= mtx._41; _42 -= mtx._42; _43 -= mtx._43; _44 -= mtx._44;
}

/*===============================================================================================* 
  @Summary: operator Matrixと実数との乗算の定義
  @Details: None
 *===============================================================================================*/
void Matrix::operator *= (float value)
{
    (*this) = (*this) * value;
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の乗算の定義
  @Details: None
 *===============================================================================================*/
void Matrix::operator *= (const Matrix &mtx)
{
    (*this) = (*this) * mtx;
}

/*===============================================================================================* 
  @Summary: operator Matrix同士の同値の定義
  @Details: 
 *===============================================================================================*/
void Matrix::operator = (const Matrix &mtx)
{
    _11 = mtx._11; _12 = mtx._12; _13 = mtx._13; _14 = mtx._14;
    _21 = mtx._21; _22 = mtx._22; _23 = mtx._23; _24 = mtx._24;
    _31 = mtx._31; _32 = mtx._32; _33 = mtx._33; _34 = mtx._34;
    _41 = mtx._41; _42 = mtx._42; _43 = mtx._43; _44 = mtx._44;
}

/*===============================================================================================* 
  @Summary: 単位行列の設定
  @Details: None
 *===============================================================================================*/
void Matrix::Identity()
{
    (*this) = Matrix::identity;
}

/*===============================================================================================* 
  @Summary: 位置座標をMatrixに設定する
  @Details: None
 *===============================================================================================*/
void Matrix::SetTranslate(const Vector3 &Vec)
{
    _41 = Vec.x;
    _42 = Vec.y;
    _43 = Vec.z;
}

/*===============================================================================================* 
  @Summary: スケールをMatrixに設定する
  @Details: None
 *===============================================================================================*/
void Matrix::SetScaling(const Vector3 &Vec)
{
    _11 *= Vec.x; _12 *= Vec.x; _13 *= Vec.x;
    _21 *= Vec.y; _22 *= Vec.y; _23 *= Vec.y;
    _31 *= Vec.z; _32 *= Vec.z; _33 *= Vec.z;
}

/*===============================================================================================* 
  @Summary: 回転をMatrixに設定する
  @Details: None
 *===============================================================================================*/
void Matrix::SetRotateYawPitchRoll(const Vector3 &Vec)
{
    (*this) *= GetYaw(Vec.z) * GetPitch(Vec.y) * GetRoll(Vec.x);
}

/*===============================================================================================* 
  @Summary: X軸回転成分をMatrixに設定する
  @Details: None
 *===============================================================================================*/
Matrix Matrix::GetRoll(float x)
{
    return Matrix( 1,       0,      0, 0,
                   0,  cos(x), sin(x), 0,
                   0, -sin(x), cos(x), 0,
                   0,       0,      0, 1 );
}

/*===============================================================================================* 
  @Summary: Y軸回転成分をMatrixに設定する
  @Details: None
 *===============================================================================================*/
Matrix Matrix::GetPitch(float y)
{
    return Matrix( cos(y), 0, -sin(y), 0,
                        0, 1,       0, 0,
                   sin(y), 0,  cos(y), 0,
                        0, 0,       0, 1 );
}

/*===============================================================================================* 
  @Summary: Z軸回転成分をMatrixに設定する
  @Details: None
 *===============================================================================================*/
Matrix Matrix::GetYaw(float z)
{
    return Matrix(  cos(z), sin(z), 0, 0,
                   -sin(z), cos(z), 0, 0,
                         0,      0, 1, 0,
                         0,      0, 0, 1 );
}

/*===============================================================================================* 
  @Summary: 
  @Details: 
 *===============================================================================================*/

/*===============================================================================================* 
  @Summary: 
  @Details: 
 *===============================================================================================*/

/*===============================================================================================* 
  @Summary: 
  @Details: 
 *===============================================================================================*/
#endif

//===============================================================================================//
//                                                                                               //
//                                          @End of File                                         //
//                                                                                               //
//===============================================================================================//
